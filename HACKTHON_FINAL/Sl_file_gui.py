
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage,messagebox,filedialog
import tkinter as tk
import os
from Appli_run_gui import Win3
import saveNames
from doc import file_maker,set_filepath


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame1")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def on_check1():
    if chk_var1.get():
        chk_var2.set(0)

def on_check2():
    if chk_var2.get():
        chk_var1.set(0)
    
def browse_docx_file(folder):
     # Get the folder path from the first text box
    if not os.path.isdir(folder):  # Check if the folder path is valid
        messagebox.showerror("Invalid Folder", "Please select a valid folder first.")
        return

    docx_file = filedialog.askopenfilename(initialdir=folder, filetypes=[("Word Documents", "*.docx")])
    if docx_file:  # If a file is selected, update the docx file entry box
        docx_file_name.set(os.path.basename(docx_file))  # Get only the file name without the path

def validate_selection(parent):
    
    # docx_file = docx_file_name.get()
    folder=saveNames.get_folder()
    docx_file=saveNames.get_dname()
    set_filepath(folder+"/"+docx_file)
    # Check if the DOCX file exists in the selected folder
    docx_file_path = os.path.join(folder, docx_file)
    if not docx_file.lower().endswith('.docx') or not os.path.isfile(docx_file_path):
        messagebox.showerror("Invalid File", f"'{docx_file}' does not exist in the selected folder.")
        return

    # Show success message if both folder and file are valid
    # messagebox.showinfo("Success", f"Folder: {folder}\nDOCX File: {docx_file_path} is valid.")
    Win3(parent)
    

# Function to display the chosen file information in a new window
def show_selection(parent):
    global message_text
    if chk_var1.get():
        file_name = entry_1.get()  # Get the name from the 'Create New' entry
        saveNames.set_dname(file_name)
        if not file_name:
            messagebox.showwarning("Input Error", "Please enter a name for the new file.")
            return
        # message_text = f"Selected Option: Create New File\nFile Name: {file_name}"
        file_maker()
        Win3(parent)
        
        
    elif chk_var2.get():
        file_name = entry_2.get()  # Get the name from the 'Existing File' entry
        print(file_name)
        saveNames.set_dname(file_name)
        if not file_name:
            messagebox.showwarning("Input Error", "Please enter the name of the existing file.")
            return
        message_text = f"Selected Option: Use Existing File\nFile Name: {file_name}"
        validate_selection(parent)
        
    else:
        messagebox.showwarning("Selection Error", "Please select an option.")
        return

    # Create a new window to display the result
    # result_window = tk.Toplevel(window)
    # result_window.title("Selection Summary")
    # result_window.geometry("300x150")

    # # Display the message
    # label_result = tk.Label(result_window, text=message_text, padx=10, pady=10)
    # label_result.pack()
    


def Win2(parent):
    parent.destroy()
    
    window = Tk()
    
    global docx_file_name
    
    docx_file_name = tk.StringVar()
    
    window.title("Note It Up")
    # Load the custom icon (use .ico for Windows or .png for other platforms)
    icon = PhotoImage(file="icon.png")  # For Linux/macOS, use PNG
    window.iconphoto(False, icon)
    
    window.geometry("500x174")
    window.configure(bg = "#070707")


    canvas = Canvas(
        window,
        bg = "#070707",
        height = 174,
        width = 500,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        220.0,
        87.0,
        image=image_image_1
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_selection(window),
        relief="flat"
    )
    button_1.place(
        x=187.0,
        y=120.0,
        width=64.0,
        height=26.0
    )


    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:browse_docx_file(saveNames.get_folder()),
        relief="flat"
    )
    button_2.place(
        x=385.0,
        y=100.0,
        width=64.0,
        height=26.0
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        289.0,
        46.0,
        image=image_image_2
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        289.0,
        85.0,
        image=image_image_3
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        319.5,
        46.5,
        image=entry_image_1
    )
    global entry_1,entry_2
    entry_1 = Entry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        highlightthickness=0
    )
    entry_1.place(
        x=200.0,
        y=35.0,
        width=239.0,
        height=21.0
    )

    entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    entry_bg_2 = canvas.create_image(
        319.5,
        85.5,
        image=entry_image_2
    )
    entry_2 = Entry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        textvariable=docx_file_name,
        highlightthickness=0
    )
    entry_2.place(
        x=200.0,
        y=74.0,
        width=239.0,
        height=21.0
    )

    # Checkbox variables (0 = unchecked, 1 = checked)
    global chk_var1,chk_var2
    chk_var1=tk.IntVar()
    chk_var2 = tk.IntVar()

    # Create the first checkbox
    chkbox1 = tk.Checkbutton(window, text="",bg="black", variable=chk_var1, command=on_check1)
    chkbox1.place(x=20.0, y=35.0)  # Set coordinates for the checkbox

    # Create label and entry for the first checkbox (Create New)
    label_create_new = tk.Label(window,bg="black",fg="white", text="Create New:")
    label_create_new.place(x=50, y=36)  # Set coordinates for the label

    # Create the second checkbox
    chkbox2 = tk.Checkbutton(window, text="",bg="black", variable=chk_var2, command=on_check2)
    chkbox2.place(x=20.0, y=73)  # Set coordinates for the second checkbox

    # Create label and entry for the second checkbox (Existing File Name)
    label_existing_file = tk.Label(window,bg="black",fg="white", text="Existing File Name:")
    label_existing_file.place(x=50, y=74)  # Set coordinates for the label

    window.resizable(False, False)
    window.mainloop()
